# Load libraries -------------------------------------------------------------------
library(randomForest) # Non-Parametric Model
library(ggplot2)   # Main Graphics
library(caret)     # Main Analysis
library(grid)      # Support for Graphics
library(gridExtra) # Support for Graphics
library(scales)    # Support for Graphics
library(reshape2)  # Data Transformation
library(plyr)      # Data Transformation
# Libraries for Parallel Computation
library(parallel)
library(doParallel)
library(foreach)
# Data & Model Parameters ----------------------------------------------------------
# Hardcoded Model Parameters
# Temporary only
data <- read.csv("data/Segmentation_Data.csv") # Loading data
train_size <- 0.7 # Size of Training Set
var_remove <- c("ID") # Variables not considered in modeling
var_clus <- "Cluster" # Class or Cluster Variable (alias predictor)
var_selected <- NULL # Variables to be considered in model
rf_ntree <- 400 # no. of trees to be used in the model
rf_mtry  <- 5 # no. of variables used in each tree
# Random Forest Models --------------------------------------------------------------
#
# Model 1 : Simple Non-Parallel Model -------------------------------------
# Calculating Training Rows
train_rows <- function(data, train_size){
x <- createDataPartition(data, p = train_size, list = FALSE)
return(x)
}
rf_model1 <- function(data = data, train_size = train_size,
var_remove = var_remove, var_clus = var_clus, var_selected = var_selected,
rf_ntree = rf_ntree, rf_mtry = rf_mtry){
# Removing Variables (Will be selected by User)
# ? This can be moved out of rf_model1 function
data <- data[, -which(names(data) %in% var_remove)]
# Selected Variables (Will be selected by User)
# ? This can be moved out of rf_model1 function
if(!is.null(var_selected)) {
var_selected1 <- c(var_selected, var_clus)
data <- data[, which(names(data) %in% var_selected)]
}
# Training & Test Set Data
train_rows <- train_rows(data = data[, var_clus], train_size = train_size)
y_train <- data[train_rows, var_clus]
x_train <- data[train_rows, -which(names(data) %in% var_clus)]
y_test <- data[-train_rows, var_clus]
x_test <- data[-train_rows, -which(names(data) %in% var_clus)]
# Notes on Random Forest Speed
# 30% More Time for Importance Calculation
# 50% More Time for Proximity Calculation
# Adding Test Set data, doesn't effect the speed of Random Forest much
# 3x speed achieved with random forest in parallel execution (4 core computer)
# But including Importance, Proximity & OOB.proximity normal is 1.3x faster than parallel version
# n_cores <- detectCores() # Detects cores
n_cores <- 1
# If more than 1 (usually 4 in latest PC's) runs random forest in parallel mode or else in normal mode
if(n_cores > 1){
# Created clusters for parallel execution
cl <- makePSOCKcluster(n_cores)
registerDoParallel(cl)
# Random forest in parallel mode
rf_ntree <- ceiling(rf_ntree/n_cores)
rf_model_parallel <- foreach(ntree = rep(rf_ntree, n_cores), .combine = combine,
.multicombine = TRUE, .packages = 'randomForest') %dopar% {
randomForest(x = x_train, y = y_train, xtest = x_test, ytest = y_test,
ntree = rf_ntree, mtry = rf_mtry, importance = TRUE)
}
stopCluster(cl)
return(rf_model_parallel) # Return random forest object
} else if(n_cores==1){
# Random forest in normal mode
rf_model_normal <- randomForest(x = x_train, y = y_train, xtest = x_test, ytest = y_test,
ntree = rf_ntree, mtry = rf_mtry, importance = TRUE, proximity = TRUE)
return(rf_model_normal) # Return random forest object
}
}
# Run Random Forest Model -----------------------------------------------------------------------
source('D:/WK/R&D/Random_Forest/rScript/Random_Forest.R')
source('rScript/Random_Forest.R')
if(!exists("rf1")){
rf1 <- rf_model1(data = data, train_size = train_size,
var_remove = var_remove, var_clus = var_clus, var_selected = var_selected,
rf_ntree = rf_ntree, rf_mtry = rf_mtry)
}
model <- rf1
str(model)
append(model, data)
model <- append(model, data)
model <- append(rf1, data)
typeof(data)
model <- append(rf1, as.data.frame(data))
model <- append(rf1, as.matrix(data))
model <- append(rf1, as.data.frame(data))
model <- append(rf1, list(data))
model$data
model <- append(rf1, as.list(data))
model <- append(rf1, list(data))
model <- append(rf1, data.frame(data))
model[18]
model[19] <- data
model <- rf1
model[19] <- data
model <- rf1
model[[19]] <- data
dimnames(model)
names(model)
names(model)[19] <- "org_data"
model[[19]] <- data
names(model)
data <- model$org_data
length(model)
# Run Random Forest Model -----------------------------------------------------------------------
source('rScript/Random_Forest.R')
if(!exists("rf1")){
rf1 <- rf_model1(data = data, train_size = train_size,
var_remove = var_remove, var_clus = var_clus, var_selected = var_selected,
rf_ntree = rf_ntree, rf_mtry = rf_mtry)
}
install.packages(c("prodlim", "robustbase", "roxygen2"))
# Run Random Forest Model -----------------------------------------------------------------------
source('rScript/Random_Forest.R')
if(!exists("rf1")){
rf1 <- rf_model1(data = data, train_size = train_size,
var_remove = var_remove, var_clus = var_clus, var_selected = var_selected,
rf_ntree = rf_ntree, rf_mtry = rf_mtry)
}
x <- rf1$org_data
y <- rf1$org_data_wo_clus
View(y)
View(x)
?predict
new_data <- y
rf_model <- rf1
new_data_class <- predict(rf1, newdata = new_data, type = c("response", "type"))
new_data_class <- predict(rf_model, newdata = new_data, type = c("response", "type"))
rf_model <- rf1
new_data_class <- predict(rf_model, newdata = new_data, type = c("response", "type"))
new_data_class <- predict(object = rf_model, newdata = new_data, type = c("response", "type"))
View(new_data)
new_data_class <- predict(rf_model, newdata = new_data, type = "response")
# Run Random Forest Model -----------------------------------------------------------------------
source('rScript/Random_Forest.R')
if(!exists("rf1")){
rf1 <- rf_model1(data = data, train_size = train_size,
var_remove = var_remove, var_clus = var_clus, var_selected = var_selected,
rf_ntree = rf_ntree, rf_mtry = rf_mtry)
}
new_data <- rf1$org_data_wo_clus
rf_model <- rf1
new_data_class <- predict(rf_model, newdata = new_data, type = "response")
new_data_class <- predict(rf_model, newdata = new_data,
type = c("response", "prob"))
new_data_class <- predict(rf_model, newdata = new_data,
type = prob)
new_data_class <- predict(rf_model, newdata = new_data,
type = "prob")
View(new_data_class)
data <- cbind(new_data_class, new_data_prob, new_data)
new_data_class <- predict(rf_model, newdata = new_data, type = "class")
new_data_prob <- predict(rf_model, newdata = new_data, type = "prob")
data <- cbind(new_data_class, new_data_prob, new_data)
View(data)
# Run Random Forest Model -----------------------------------------------------------------------
source('rScript/Random_Forest.R')
if(!exists("rf1")){
rf1 <- rf_model1(data = data, train_size = train_size,
var_remove = var_remove, var_clus = var_clus, var_selected = var_selected,
rf_ntree = rf_ntree, rf_mtry = rf_mtry)
}
# Predicting Class (or Cluster or Segment) of new data -------------------------
# RF Prediction Function
rf_predict <- function(rf_model, new_data){
pred_prob <- predict(rf_model, newdata = new_data, type = "prob")
# Combine with new_data
pred_class <- predict(rf_model, newdata = new_data, type = "class")
data <- cbind(new_data_class, new_data_prob, new_data)
# Predict Final class & Probability
return(data)
}
# Test prediction function
pred_data <- rf_predict(rf1, rf1$org_data_wo_class)
rf_predict <- function(rf_model, new_data){
# Predict Final class & Probability
pred_class <- predict(rf_model, newdata = new_data, type = "class")
pred_prob <- predict(rf_model, newdata = new_data, type = "prob")
# Combine with new_data
data <- cbind(pred_class, pred_prob, new_data)
return(data)
}
# Test prediction function
pred_data <- rf_predict(rf1, rf1$org_data_wo_class)
View(pred_data)
